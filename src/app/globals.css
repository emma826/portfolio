@import "tailwindcss";
@import "tw-animate-css";

@custom-variant dark (&:is(.dark *));

@theme inline {
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --font-sans: var(--font-geist-sans);
  --font-mono: var(--font-geist-mono);
  --color-sidebar-ring: var(--sidebar-ring);
  --color-sidebar-border: var(--sidebar-border);
  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);
  --color-sidebar-accent: var(--sidebar-accent);
  --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);
  --color-sidebar-primary: var(--sidebar-primary);
  --color-sidebar-foreground: var(--sidebar-foreground);
  --color-sidebar: var(--sidebar);
  --color-chart-5: var(--chart-5);
  --color-chart-4: var(--chart-4);
  --color-chart-3: var(--chart-3);
  --color-chart-2: var(--chart-2);
  --color-chart-1: var(--chart-1);
  --color-ring: var(--ring);
  --color-input: var(--input);
  --color-border: var(--border);
  --color-destructive: var(--destructive);
  --color-accent-foreground: var(--accent-foreground);
  --color-accent: var(--accent);
  --color-muted-foreground: var(--muted-foreground);
  --color-muted: var(--muted);
  --color-secondary-foreground: var(--secondary-foreground);
  --color-secondary: var(--secondary);
  --color-primary-foreground: var(--primary-foreground);
  --color-primary: var(--primary);
  --color-popover-foreground: var(--popover-foreground);
  --color-popover: var(--popover);
  --color-card-foreground: var(--card-foreground);
  --color-card: var(--card);
  --radius-sm: calc(var(--radius) - 4px);
  --radius-md: calc(var(--radius) - 2px);
  --radius-lg: var(--radius);
  --radius-xl: calc(var(--radius) + 4px);
}

:root {
  --radius: 0.625rem;
  --background: oklch(1 0 0);
  --foreground: oklch(0.145 0 0);
  --card: oklch(1 0 0);
  --card-foreground: oklch(0.145 0 0);
  --popover: oklch(1 0 0);
  --popover-foreground: oklch(0.145 0 0);
  --primary: oklch(0.205 0 0);
  --primary-foreground: oklch(0.985 0 0);
  --secondary: oklch(0.97 0 0);
  --secondary-foreground: oklch(0.205 0 0);
  --muted: oklch(0.97 0 0);
  --muted-foreground: oklch(0.556 0 0);
  --accent: oklch(0.97 0 0);
  --accent-foreground: oklch(0.205 0 0);
  --destructive: oklch(0.577 0.245 27.325);
  --border: oklch(0.922 0 0);
  --input: oklch(0.922 0 0);
  --ring: oklch(0.708 0 0);
  --chart-1: oklch(0.646 0.222 41.116);
  --chart-2: oklch(0.6 0.118 184.704);
  --chart-3: oklch(0.398 0.07 227.392);
  --chart-4: oklch(0.828 0.189 84.429);
  --chart-5: oklch(0.769 0.188 70.08);
  --sidebar: oklch(0.985 0 0);
  --sidebar-foreground: oklch(0.145 0 0);
  --sidebar-primary: oklch(0.205 0 0);
  --sidebar-primary-foreground: oklch(0.985 0 0);
  --sidebar-accent: oklch(0.97 0 0);
  --sidebar-accent-foreground: oklch(0.205 0 0);
  --sidebar-border: oklch(0.922 0 0);
  --sidebar-ring: oklch(0.708 0 0);
  --tw-prose-body: oklch(44.2% 0.017 285.786);
  --tw-prose-headings: oklch(21% 0.006 285.885);
  --tw-prose-links: oklch(70.4% 0.14 182.503);
  --tw-prose-links-hover: oklch(60% 0.118 184.704);
  --tw-prose-underline: oklab(70.4% -0.139866 -0.00611406/.2);
  --tw-prose-underline-hover: oklch(70.4% 0.14 182.503);
  --tw-prose-bold: oklch(21% 0.006 285.885);
  --tw-prose-counters: oklch(21% 0.006 285.885);
  --tw-prose-bullets: oklch(21% 0.006 285.885);
  --tw-prose-hr: oklch(96.7% 0.001 286.375);
  --tw-prose-quote-borders: oklch(92% 0.004 286.32);
  --tw-prose-captions: oklch(70.5% 0.015 286.067);
  --tw-prose-code: oklch(37% 0.013 285.805);
  --tw-prose-code-bg: oklab(87.1% 0.00168259 -0.00575924/.2);
  --tw-prose-pre-code: oklch(96.7% 0.001 286.375);
  --tw-prose-pre-bg: oklch(21% 0.006 285.885);
  --tw-prose-pre-border: transparent;
  --tw-prose-th-borders: oklch(92% 0.004 286.32);
  --tw-prose-td-borders: oklch(96.7% 0.001 286.375);
  --tw-prose-invert-body: oklch(70.5% 0.015 286.067);
  color: var(--tw-prose-body);
  line-height: 1.75rem;
}

.dark {
  --background: oklch(0.145 0 0);
  --foreground: oklch(0.985 0 0);
  --card: oklch(0.205 0 0);
  --card-foreground: oklch(0.985 0 0);
  --popover: oklch(0.205 0 0);
  --popover-foreground: oklch(0.985 0 0);
  --primary: oklch(0.922 0 0);
  --primary-foreground: oklch(0.205 0 0);
  --secondary: oklch(0.269 0 0);
  --secondary-foreground: oklch(0.985 0 0);
  --muted: oklch(0.269 0 0);
  --muted-foreground: oklch(0.708 0 0);
  --accent: oklch(0.269 0 0);
  --accent-foreground: oklch(0.985 0 0);
  --destructive: oklch(0.704 0.191 22.216);
  --border: oklch(1 0 0 / 10%);
  --input: oklch(1 0 0 / 15%);
  --ring: oklch(0.556 0 0);
  --chart-1: oklch(0.488 0.243 264.376);
  --chart-2: oklch(0.696 0.17 162.48);
  --chart-3: oklch(0.769 0.188 70.08);
  --chart-4: oklch(0.627 0.265 303.9);
  --chart-5: oklch(0.645 0.246 16.439);
  --sidebar: oklch(0.205 0 0);
  --sidebar-foreground: oklch(0.985 0 0);
  --sidebar-primary: oklch(0.488 0.243 264.376);
  --sidebar-primary-foreground: oklch(0.985 0 0);
  --sidebar-accent: oklch(0.269 0 0);
  --sidebar-accent-foreground: oklch(0.985 0 0);
  --sidebar-border: oklch(1 0 0 / 10%);
  --sidebar-ring: oklch(0.556 0 0);
  --tw-prose-invert-headings: oklch(92% 0.004 286.32);
  --tw-prose-invert-links: oklch(77.7% 0.152 181.912);
  --tw-prose-invert-links-hover: oklch(77.7% 0.152 181.912);
  --tw-prose-invert-underline: oklab(77.7% -0.151915 -0.00507142/.3);
  --tw-prose-invert-underline-hover: oklch(77.7% 0.152 181.912);
  --tw-prose-invert-bold: oklch(92% 0.004 286.32);
  --tw-prose-invert-counters: oklch(92% 0.004 286.32);
  --tw-prose-invert-bullets: oklch(92% 0.004 286.32);
  --tw-prose-invert-hr: oklab(37% 0.00354074 -0.0125085/.4);
  --tw-prose-invert-quote-borders: oklch(55.2% 0.016 285.938);
  --tw-prose-invert-captions: oklch(55.2% 0.016 285.938);
  --tw-prose-invert-code: oklch(87.1% 0.006 286.286);
  --tw-prose-invert-code-bg: oklab(92% 0.00112401 -0.00383883/.05);
  --tw-prose-invert-pre-code: oklch(96.7% 0.001 286.375);
  --tw-prose-invert-pre-bg: #0006;
  --tw-prose-invert-pre-border: oklab(92% 0.00112401 -0.00383883/.1);
  --tw-prose-invert-th-borders: oklch(37% 0.013 285.805);
  --tw-prose-invert-td-borders: oklch(27.4% 0.006 286.033);
  color: var(--tw-prose-invert-body);
  line-height: 1.75rem;
}

@layer base {
  * {
    @apply border-border outline-ring/50;
  }
  body {
    @apply bg-background text-foreground;
  }
}

.prose
  :where(.prose > *):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
  margin-top: 2.5rem;
  margin-bottom: 2.5rem;
}

.prose :where(p):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
  margin-top: 1.75rem;
  margin-bottom: 1.75rem;
}

.prose
  :where(h2, h3, h4):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
  color: var(--tw-prose-headings);
  font-weight: 600;
  color: var(--foreground)
}

.prose :where(h2):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
  margin-top: 4rem;
  margin-bottom: 1rem;
  font-size: 1.875rem;
  line-height: 2.75rem;
}

.prose :where(h3):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
  margin-top: 2rem;
  margin-bottom: 1rem;
  font-size: 1.5rem;
  line-height: 1.75rem;
}

.prose
  :where(:is(h2, h3) + *):not(
    :where([class~="not-prose"], [class~="not-prose"] *)
  ) {
  margin-top: 0;
}

.prose :where(img):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
  border-radius: 1.5rem;
}

.prose :where(a):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
  color: var(--tw-prose-links);
  text-decoration: underline;
  -webkit-text-decoration-color: var(--tw-prose-underline);
  text-decoration-color: var(--tw-prose-underline);
  font-weight: 600;
  transition-property: color, text-decoration-color;
  transition-duration: 0.15s;
  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
}

.prose
  :where(a:hover):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
  color: var(--tw-prose-links-hover);
  -webkit-text-decoration-color: var(--tw-prose-underline-hover);
  text-decoration-color: var(--tw-prose-underline-hover);
}

.prose
  :where(strong):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
  color: var(--tw-prose-bold);
  font-weight: 600;
}

.prose :where(code):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
  color: var(--tw-prose-code);
  background-color: var(--tw-prose-code-bg);
  border-radius: 0.5rem;
  padding-left: 0.25rem;
  padding-right: 0.25rem;
  font-size: 0.875rem;
  font-weight: 600;
  display: inline-block;
}

.prose
  :where(a code):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
  color: inherit;
}

.prose
  :where(:is(h2, h3) code):not(
    :where([class~="not-prose"], [class~="not-prose"] *)
  ) {
  font-weight: 700;
}

.prose
  :where(blockquote):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
  border-left-width: 2px;
  border-left-color: var(--tw-prose-quote-borders);
  padding-left: 1.5rem;
  font-style: italic;
}

.prose
  :where(figcaption):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
  color: var(--tw-prose-captions);
  margin-top: 0.75rem;
  font-size: 0.875rem;
  line-height: 1.5rem;
}

.prose
  :where(figcaption > p):not(
    :where([class~="not-prose"], [class~="not-prose"] *)
  ) {
  margin: 0;
}

.prose :where(ul):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
  list-style-type: disc;
}

.prose :where(ol):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
  list-style-type: decimal;
}

.prose
  :where(ul, ol):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
  padding-left: 1.5rem;
}

.prose :where(li):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
  margin-top: 1.5rem;
  margin-bottom: 1.5rem;
  padding-left: 0.875rem;
}

.prose
  :where(li):not(:where([class~="not-prose"], [class~="not-prose"] *))::marker {
  font-size: 0.875rem;
  font-weight: 600;
}

.prose
  :where(ol > li):not(
    :where([class~="not-prose"], [class~="not-prose"] *)
  )::marker {
  color: var(--tw-prose-counters);
}

.prose
  :where(ul > li):not(
    :where([class~="not-prose"], [class~="not-prose"] *)
  )::marker {
  color: var(--tw-prose-bullets);
}

.prose
  :where(li :is(ol, ul)):not(
    :where([class~="not-prose"], [class~="not-prose"] *)
  ) {
  margin-top: 1rem;
  margin-bottom: 1rem;
}

.prose
  :where(li :is(li, p)):not(
    :where([class~="not-prose"], [class~="not-prose"] *)
  ) {
  margin-top: 0.75rem;
  margin-bottom: 0.75rem;
}

.prose :where(pre):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
  color: var(--tw-prose-pre-code);
  background-color: var(--tw-prose-pre-bg);
  border: 1px solid;
  border-color: var(--tw-prose-pre-border);
  border-radius: 1.5rem;
  padding: 2rem;
  font-size: 0.875rem;
  font-weight: 500;
  overflow-x: auto;
}

.prose
  :where(pre code):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
  color: inherit;
  font-size: inherit;
  font-weight: inherit;
  background-color: #0000;
  border-radius: 0;
  padding: 0;
  display: inline;
}

.prose :where(hr):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
  border-top-width: 1px;
  border-color: var(--tw-prose-hr);
  margin-top: 5rem;
  margin-bottom: 5rem;
}

.prose :where(table):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
  table-layout: auto;
  text-align: left;
  width: 100%;
  font-size: 0.875rem;
}

.prose :where(thead):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
  border-bottom-width: 1px;
  border-bottom-color: var(--tw-prose-th-borders);
}

.prose
  :where(thead th):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
  color: var(--tw-prose-headings);
  vertical-align: bottom;
  padding-bottom: 0.5rem;
  font-weight: 600;
}

.prose
  :where(thead th:not(:first-child)):not(
    :where([class~="not-prose"], [class~="not-prose"] *)
  ) {
  padding-left: 0.5rem;
}

.prose
  :where(thead th:not(:last-child)):not(
    :where([class~="not-prose"], [class~="not-prose"] *)
  ) {
  padding-right: 0.5rem;
}

.prose
  :where(tbody tr):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
  border-bottom-width: 1px;
  border-bottom-color: var(--tw-prose-td-borders);
}

.prose
  :where(tbody tr:last-child):not(
    :where([class~="not-prose"], [class~="not-prose"] *)
  ) {
  border-bottom-width: 0;
}

.prose
  :where(tbody td):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
  vertical-align: baseline;
}

.prose :where(tfoot):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
  border-top-width: 1px;
  border-top-color: var(--tw-prose-th-borders);
}

.prose
  :where(tfoot td):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
  vertical-align: top;
}

.prose
  :where(:is(tbody, tfoot) td):not(
    :where([class~="not-prose"], [class~="not-prose"] *)
  ) {
  padding-top: 0.5rem;
  padding-bottom: 0.5rem;
}

.prose
  :where(:is(tbody, tfoot) td:not(:first-child)):not(
    :where([class~="not-prose"], [class~="not-prose"] *)
  ) {
  padding-left: 0.5rem;
}

.prose
  :where(:is(tbody, tfoot) td:not(:last-child)):not(
    :where([class~="not-prose"], [class~="not-prose"] *)
  ) {
  padding-right: 0.5rem;
}
